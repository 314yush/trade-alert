#!/usr/bin/env python3
"""
Test Telegram Integration Locally

This script helps you test your Telegram bot integration before deploying to Vercel.
Run this to verify your bot token and chat ID are working correctly.
"""

import os
import requests
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def test_telegram_credentials():
    """Test if Telegram credentials are working."""
    print("üîç Testing Telegram Integration...")
    print("=" * 50)
    
    # Get credentials
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN not found in environment")
        print("   Please add it to your .env file or set it as an environment variable")
        return False
    
    if not chat_id:
        print("‚ùå TELEGRAM_CHAT_ID not found in environment")
        print("   Please add it to your .env file or set it as an environment variable")
        return False
    
    print(f"‚úÖ Bot Token: {bot_token[:10]}...{bot_token[-10:]}")
    print(f"‚úÖ Chat ID: {chat_id}")
    
    # Test bot info
    print("\nü§ñ Testing Bot Information...")
    try:
        url = f"https://api.telegram.org/bot{bot_token}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            bot_info = response.json()
            if bot_info.get('ok'):
                bot_data = bot_info['result']
                print(f"‚úÖ Bot Name: {bot_data.get('first_name', 'Unknown')}")
                print(f"‚úÖ Bot Username: @{bot_data.get('username', 'Unknown')}")
                print(f"‚úÖ Bot ID: {bot_data.get('id', 'Unknown')}")
            else:
                print(f"‚ùå Bot API error: {bot_info.get('description', 'Unknown error')}")
                return False
        else:
            print(f"‚ùå Failed to get bot info: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error testing bot info: {e}")
        return False
    
    # Test sending message
    print("\nüì§ Testing Message Sending...")
    try:
        test_message = """
üß™ **Telegram Integration Test**

This is a test message from your trading bot!
If you see this, your Telegram integration is working correctly. ‚úÖ

**Next Steps:**
1. Deploy to Vercel
2. Start the bot via `/start` endpoint
3. Receive trading signals automatically

Generated by: Local Test Script
        """.strip()
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': test_message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                print("‚úÖ Test message sent successfully!")
                print("   Check your Telegram chat for the test message")
                return True
            else:
                print(f"‚ùå Failed to send message: {result.get('description', 'Unknown error')}")
                return False
        else:
            print(f"‚ùå Failed to send message: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error sending test message: {e}")
        return False

def show_setup_instructions():
    """Show setup instructions for Telegram bot."""
    print("\nüìã Telegram Bot Setup Instructions:")
    print("=" * 50)
    print("1. Create a new bot with @BotFather on Telegram")
    print("2. Get your bot token")
    print("3. Start a chat with your bot")
    print("4. Get your chat ID (you can use @userinfobot)")
    print("5. Add these to your .env file:")
    print("   TELEGRAM_BOT_TOKEN=your_bot_token_here")
    print("   TELEGRAM_CHAT_ID=your_chat_id_here")
    print("6. Deploy to Vercel with the same environment variables")

def main():
    """Main function."""
    print("üöÄ Telegram Trading Bot - Local Test")
    print("=" * 50)
    
    # Test credentials
    success = test_telegram_credentials()
    
    if success:
        print("\nüéâ SUCCESS! Your Telegram integration is working!")
        print("   You can now deploy to Vercel and start receiving trading signals.")
        print("\n   Next steps:")
        print("   1. Deploy to Vercel")
        print("   2. Visit your Vercel URL")
        print("   3. Use /start endpoint to start the bot")
        print("   4. Wait for trading signals in Telegram!")
    else:
        print("\n‚ùå FAILED! Telegram integration is not working.")
        show_setup_instructions()
    
    print("\n" + "=" * 50)

if __name__ == "__main__":
    main()
