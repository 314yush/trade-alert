"""
Strategy Manager

Coordinates all trading strategies and provides a unified interface for the main bot.
This allows you to easily add, remove, or modify strategies without changing the core system.
"""

import logging
from typing import Dict, List, Optional, Any
from strategies import (
    AggressiveMomentumStrategy,
    ModerateEMAStrategy, 
    ConservativeTrendStrategy
)
from data_handler import DataHandler

logger = logging.getLogger(__name__)


class StrategyManager:
    """
    Manages all trading strategies in a modular way.
    
    This class provides a unified interface for:
    - Adding/removing strategies
    - Checking all strategies for signals
    - Managing strategy parameters
    - Strategy statistics and monitoring
    """
    
    def __init__(self):
        """Initialize the strategy manager with all strategies."""
        self.data_handler = DataHandler()
        self.strategies = {}
        self.strategy_configs = {}
        
        self._initialize_strategies()
        logger.info("Strategy manager initialized successfully")
    
    def _initialize_strategies(self) -> None:
        """Initialize all trading strategies."""
        try:
            # Initialize Aggressive Strategy (5m)
            self.strategies['aggressive_momentum_ignition'] = AggressiveMomentumStrategy()
            self.strategy_configs['aggressive_momentum_ignition'] = {
                'timeframe': '5m',
                'interval': 5,  # minutes
                'enabled': True
            }
            
            # Initialize Moderate Strategy (15m)
            self.strategies['moderate_ema_crossover'] = ModerateEMAStrategy()
            self.strategy_configs['moderate_ema_crossover'] = {
                'timeframe': '15m',
                'interval': 15,  # minutes
                'enabled': True
            }
            
            # Initialize Conservative Strategy (4h)
            self.strategies['conservative_trend_rider'] = ConservativeTrendStrategy()
            self.strategy_configs['conservative_trend_rider'] = {
                'timeframe': '4h',
                'interval': 240,  # minutes
                'enabled': True
            }
            
            logger.info(f"Initialized {len(self.strategies)} strategies")
            
        except Exception as e:
            logger.error(f"Error initializing strategies: {e}")
            raise
    
    def check_strategy(self, strategy_name: str, symbol: str) -> Optional[Dict[str, Any]]:
        """
        Check a specific strategy for signals.
        
        Args:
            strategy_name (str): Name of the strategy to check
            symbol (str): Trading pair symbol
            
        Returns:
            Optional[Dict[str, Any]]: Trading signal if generated
        """
        try:
            if strategy_name not in self.strategies:
                logger.warning(f"Strategy {strategy_name} not found")
                return None
            
            strategy = self.strategies[strategy_name]
            config = self.strategy_configs[strategy_name]
            
            if not config['enabled']:
                logger.debug(f"Strategy {strategy_name} is disabled")
                return None
            
            # Fetch data for the strategy's timeframe
            data = self.data_handler.fetch_ohlcv(symbol, config['timeframe'], 200)
            if data is None:
                logger.warning(f"Could not fetch data for {symbol} on {config['timeframe']}")
                return None
            
            # Calculate indicators for this timeframe
            indicators = self._get_indicators_for_strategy(strategy_name, config['timeframe'])
            data_with_indicators = self.data_handler.calculate_indicators(data, indicators)
            
            if data_with_indicators is None:
                logger.warning(f"Could not calculate indicators for {strategy_name}")
                return None
            
            # Check for signals
            signal = strategy.check_signal(symbol, data_with_indicators)
            
            if signal:
                logger.info(f"Signal generated by {strategy_name}: {signal['signal_type']} {symbol}")
            
            return signal
            
        except Exception as e:
            logger.error(f"Error checking strategy {strategy_name}: {e}")
            return None
    
    def check_all_strategies(self, symbol: str) -> List[Dict[str, Any]]:
        """
        Check all enabled strategies for signals.
        
        Args:
            symbol (str): Trading pair symbol
            
        Returns:
            List[Dict[str, Any]]: List of all generated signals
        """
        signals = []
        
        for strategy_name in self.strategies.keys():
            try:
                signal = self.check_strategy(strategy_name, symbol)
                if signal:
                    signals.append(signal)
                    
            except Exception as e:
                logger.error(f"Error checking {strategy_name}: {e}")
        
        return signals
    
    def _get_indicators_for_strategy(self, strategy_name: str, timeframe: str) -> List[Dict[str, Any]]:
        """
        Get the required indicators for a specific strategy.
        
        Args:
            strategy_name (str): Name of the strategy
            timeframe (str): Timeframe for the strategy
            
        Returns:
            List[Dict[str, Any]]: List of indicator configurations
        """
        if strategy_name == 'aggressive_momentum_ignition':
            return [
                {
                    'name': 'STOCHRSI',
                    'k': 8,
                    'd': 2,
                    'rsi_length': 11
                }
            ]
        elif strategy_name == 'moderate_ema_crossover':
            return [
                {'name': 'EMA', 'length': 8},
                {'name': 'EMA', 'length': 34},
                {'name': 'RSI', 'length': 14},
                {'name': 'EMA', 'length': 50}  # Trend filter
            ]
        elif strategy_name == 'conservative_trend_rider':
            return [
                {'name': 'SMA', 'length': 50},
                {'name': 'SMA', 'length': 200},
                {'name': 'ADX', 'length': 14},  # Use length 14 to match config
                {'name': 'RSI', 'length': 14}
            ]
        else:
            return []
    
    def get_strategy_parameters(self, strategy_name: str) -> Optional[Dict[str, Any]]:
        """
        Get parameters for a specific strategy.
        
        Args:
            strategy_name (str): Name of the strategy
            
        Returns:
            Optional[Dict[str, Any]]: Strategy parameters
        """
        if strategy_name in self.strategies:
            return self.strategies[strategy_name].get_parameters()
        return None
    
    def update_strategy_parameters(self, strategy_name: str, new_params: Dict[str, Any]) -> bool:
        """
        Update parameters for a specific strategy.
        
        Args:
            strategy_name (str): Name of the strategy
            new_params (Dict[str, Any]): New parameters
            
        Returns:
            bool: True if update successful, False otherwise
        """
        try:
            if strategy_name in self.strategies:
                self.strategies[strategy_name].update_parameters(new_params)
                logger.info(f"Updated parameters for {strategy_name}")
                return True
            else:
                logger.warning(f"Strategy {strategy_name} not found")
                return False
                
        except Exception as e:
            logger.error(f"Error updating parameters for {strategy_name}: {e}")
            return False
    
    def enable_strategy(self, strategy_name: str) -> bool:
        """Enable a strategy."""
        if strategy_name in self.strategy_configs:
            self.strategy_configs[strategy_name]['enabled'] = True
            logger.info(f"Enabled strategy: {strategy_name}")
            return True
        return False
    
    def disable_strategy(self, strategy_name: str) -> bool:
        """Disable a strategy."""
        if strategy_name in self.strategy_configs:
            self.strategy_configs[strategy_name]['enabled'] = False
            logger.info(f"Disabled strategy: {strategy_name}")
            return True
        return False
    
    def get_strategy_status(self) -> Dict[str, Any]:
        """Get status of all strategies."""
        status = {}
        
        for name, strategy in self.strategies.items():
            config = self.strategy_configs[name]
            status[name] = {
                'enabled': config['enabled'],
                'timeframe': config['timeframe'],
                'interval': config['interval'],
                'statistics': strategy.get_statistics()
            }
        
        return status
    
    def add_strategy(self, strategy_name: str, strategy_instance, config: Dict[str, Any]) -> bool:
        """
        Add a new strategy dynamically.
        
        Args:
            strategy_name (str): Name for the new strategy
            strategy_instance: Strategy instance (must inherit from BaseStrategy)
            config (Dict[str, Any]): Strategy configuration
            
        Returns:
            bool: True if added successfully, False otherwise
        """
        try:
            # Validate that it's a proper strategy
            from strategies.base_strategy import BaseStrategy
            if not isinstance(strategy_instance, BaseStrategy):
                logger.error(f"Strategy must inherit from BaseStrategy")
                return False
            
            self.strategies[strategy_name] = strategy_instance
            self.strategy_configs[strategy_name] = config
            
            logger.info(f"Added new strategy: {strategy_name}")
            return True
            
        except Exception as e:
            logger.error(f"Error adding strategy {strategy_name}: {e}")
            return False
    
    def remove_strategy(self, strategy_name: str) -> bool:
        """
        Remove a strategy.
        
        Args:
            strategy_name (str): Name of the strategy to remove
            
        Returns:
            bool: True if removed successfully, False otherwise
        """
        try:
            if strategy_name in self.strategies:
                # Cleanup the strategy
                self.strategies[strategy_name].cleanup()
                
                # Remove from dictionaries
                del self.strategies[strategy_name]
                del self.strategy_configs[strategy_name]
                
                logger.info(f"Removed strategy: {strategy_name}")
                return True
            else:
                logger.warning(f"Strategy {strategy_name} not found")
                return False
                
        except Exception as e:
            logger.error(f"Error removing strategy {strategy_name}: {e}")
            return False
    
    def cleanup(self) -> None:
        """Clean up all strategies."""
        try:
            for strategy in self.strategies.values():
                strategy.cleanup()
            
            logger.info("Strategy manager cleanup completed")
            
        except Exception as e:
            logger.error(f"Error during strategy manager cleanup: {e}")


# Example usage
if __name__ == "__main__":
    # Test the strategy manager
    manager = StrategyManager()
    
    # Get status of all strategies
    status = manager.get_strategy_status()
    print("Strategy Status:")
    for name, info in status.items():
        print(f"  {name}: {'ENABLED' if info['enabled'] else 'DISABLED'} ({info['timeframe']})")
    
    # Test checking a strategy
    signal = manager.check_strategy('aggressive_momentum_ignition', 'BTC/USDT')
    if signal:
        print(f"Signal generated: {signal}")
    else:
        print("No signal generated")
    
    # Cleanup
    manager.cleanup()
